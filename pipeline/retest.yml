trigger:
  branches:
    include:
      - main  # Trigger on changes to the 'main' branch

pool:
  vmImage: 'windows-latest'  # Using a Windows agent

jobs:
- job: PowershellJob
  displayName: "Run PowerShell Commands"
  steps:
    - task: PowerShell@2
      displayName: "Run inline PowerShell"
      inputs:
        targetType: 'inline'
        script: |
            # Create a directory to store the DLL
            $dllPath = "$(System.DefaultWorkingDirectory)/dll"
            New-Item -ItemType Directory -Path $dllPath -Force

            # Download YamlDotNet from NuGet
            Invoke-WebRequest -Uri https://www.nuget.org/api/v2/package/YamlDotNet/12.0.2 -OutFile "$dllPath/YamlDotNet.nupkg"

            # Extract the DLL from the NuGet package
            $tempDir = "$(System.DefaultWorkingDirectory)/temp"
            New-Item -ItemType Directory -Path $tempDir -Force
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory("$dllPath/YamlDotNet.nupkg", $tempDir)

            # Find and copy the DLL to the working directory
            Copy-Item -Path "$tempDir/lib/netstandard2.0/YamlDotNet.dll" -Destination $dllPath

            # Define the folder containing YAML files
            $yamlFolder = "$(System.DefaultWorkingDirectory)/test-cases"

            # Initialize an empty array to hold JSON objects
            $jsonArray = @()

            # Get all YAML files from the folder
            $yamlFiles = Get-ChildItem -Path $yamlFolder -Filter *.yaml

            # Loop through each YAML file and convert it to a JSON object
            foreach ($file in $yamlFiles) {
                Write-Host "Processing file: $($file.FullName)"

                # Read the YAML file content
                $yamlContent = Get-Content -Raw -Path $file.FullName

                # Convert YAML content to a PowerShell object
                $yamlObject = [YamlDotNet.Serialization.Deserializer]::new().Deserialize([string]$yamlContent)

                # Add the object to the JSON array
                $jsonArray += $yamlObject
            }

            # Convert the entire array to JSON format
            $jsonPayload = $jsonArray | ConvertTo-Json -Depth 10

            Write-Host "Combined JSON Payload:"
            Write-Host $jsonPayload

            $headers = @{
              "auth-token" = "4a7bfba1-4a6f-4011-8e02-22c8b7c34b83";
            }
            
            $jsonBase.Add("baselineMutations", $jsonPayload)
            $body = $jsonBase | ConvertTo-Json
            Invoke-RestMethod -Method POST -Headers $headers -ContentType "application/json" -Body $body -uri "https://api.testrigor.com/api/v1/apps/uPsh9qmYGbsJjDA7g/retest"